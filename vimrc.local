set nocompatible               " be iMproved
filetype off                   " required!

" Kill Beeps
set noeb vb t_vb=

" recommended configurations for powerline
set laststatus=2   " Always show the statusline
set encoding=utf-8 " Necessary to show Unicode glyphs
let g:Powerline_symbols = 'fancy'

" Turn on auto-indenting and set it to copy previous
" indentation
set autoindent
set copyindent

" testing strategy for vim-test
" let test#strategy = "tslime"
" let test#strategy = "vimterminal"
let test#strategy = "vimux"
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1

" Highlight matching parentheses
set showmatch

syntax enable
set background=dark
colorscheme jellybeans

" Resize windows with arrow keys
nnoremap <D-Up> <C-w>+
nnoremap <D-Down> <C-w>-
nnoremap <D-Left> <C-w><
nnoremap <D-Right>  <C-w>>

" hit ,f to find the definition of the current class
" this uses ctags. the standard way to get this is Ctrl-]
nnoremap <silent> ,f <C-]>

" use ,F to jump to tag in a vertical split
nnoremap <silent> ,F :let word=expand("<cword>")<CR>:vsp<CR>:wincmd w<cr>:exec("tag ". word)<cr>

autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Remove trailing white spaces on save.
autocmd BufWritePre * :%s/\s\+$//e

nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

set number                     " Show current line number
set relativenumber             " Show relative line numbers

" allow dot command to operate over a visual selection
xnoremap . :normal .<CR>

" allow user macro over a visual selection
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>
map <Leader>i mmgg=G`m
map <Leader>bb :!bundle install<cr>
vmap <Leader>b :<C-U>!git blame <C-R>=expand("%:p") <CR> \| sed -n <C-R>=line("'<") <CR>,<C-R>=line("'>") <CR>p <CR>
map <Leader>gw :!git add . && git commit -m 'WIP' && git push<cr>
map <Leader>d :vs ~/code/Notes/todo.md<cr>
nmap <leader>f orequire IEx; IEx.pry<esc>

set hlsearch
set ignorecase
set smartcase
map <Leader>h :nohlsearch<cr>

let g:jsx_ext_required = 0
let g:python3_host_prog = '/usr/bin/python3'

" vim elixir formatter
let g:mix_format_on_save = 1
let g:mix_format_silent_errors = 1
let g:mix_format_options = '--check-equivalent'


let g:ale_linters = {
      \  'elixir': ['credo', 'elixir-ls'],
      \  'ruby': ['prettier', 'solargraph'],
      \  'javascript': ['prettier', 'eslint', 'tsserver'],
      \  'typescript': ['prettier', 'eslint', 'tsserver'],
\}

let g:ale_fixers = {
      \  '*': ['remove_trailing_lines', 'trim_whitespace'],
      \  'javascript': ['prettier'],
      \  'typescript': ['prettier'],
      \  'html': ['prettier'],
      \  'ruby': ['prettier'],
\}

let g:ale_elixir_elixir_ls_config = {
      \   'elixirLS': {
      \     'dialyzerEnabled': v:false,
      \   },
      \}

let g:ale_fix_on_save = 1

" gist-vim configurations
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

" help formatting json
com! FormatJson %!python -m json.tool

" Some tslime mappings
" vmap <Leader>mt <Plug>SendSelectionToTmux
" nmap <Leader>mt <Plug>NormalModeSendToTmux

" DisplayTableSummary plugin
nnoremap <leader>dt :DisplayTableSummary<cr>
nnoremap <leader>xt :call popup_clear()<cr>
